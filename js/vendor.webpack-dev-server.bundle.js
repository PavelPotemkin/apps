(self["webpackChunkwebpack_template"]=self["webpackChunkwebpack_template"]||[]).push([["vendor.webpack-dev-server"],{"./node_modules/webpack-dev-server/client/clients/WebSocketClient.js":
/*!***************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/clients/WebSocketClient.js ***!
  \***************************************************************************/(e,o,t)=>{"use strict";t.r(o),t.d(o,{default:()=>i});var n=t(/*! ../utils/log.js */"./node_modules/webpack-dev-server/client/utils/log.js");function r(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}function a(e,o){for(var t=0;t<o.length;t++){var n=o[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function l(e,o,t){return o&&a(e.prototype,o),t&&a(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}var i=function(){function e(o){r(this,e),this.client=new WebSocket(o),this.client.onerror=function(e){n.log.error(e)}}return l(e,[{key:"onOpen",value:function(e){this.client.onopen=e}},{key:"onClose",value:function(e){this.client.onclose=e}},{key:"onMessage",value:function(e){this.client.onmessage=function(o){e(o.data)}}}]),e}()},"./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=localhost&port=8080&pathname=%2Fws&logging=info&reconnect=10":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=localhost&port=8080&pathname=%2Fws&logging=info&reconnect=10 ***!
  \**********************************************************************************************************************************************/(e,o,t)=>{"use strict";var n="?protocol=ws%3A&hostname=localhost&port=8080&pathname=%2Fws&logging=info&reconnect=10";t.r(o);var r=t(/*! webpack/hot/log.js */"./node_modules/webpack/hot/log.js"),a=t.n(r),l=t(/*! ./modules/strip-ansi/index.js */"./node_modules/webpack-dev-server/client/modules/strip-ansi/index.js"),i=t.n(l),c=t(/*! ./utils/parseURL.js */"./node_modules/webpack-dev-server/client/utils/parseURL.js"),s=t(/*! ./socket.js */"./node_modules/webpack-dev-server/client/socket.js"),u=t(/*! ./overlay.js */"./node_modules/webpack-dev-server/client/overlay.js"),d=t(/*! ./utils/log.js */"./node_modules/webpack-dev-server/client/utils/log.js"),f=t(/*! ./utils/sendMessage.js */"./node_modules/webpack-dev-server/client/utils/sendMessage.js"),p=t(/*! ./utils/reloadApp.js */"./node_modules/webpack-dev-server/client/utils/reloadApp.js"),g=t(/*! ./utils/createSocketURL.js */"./node_modules/webpack-dev-server/client/utils/createSocketURL.js"),v={isUnloading:!1,currentHash:t.h()},y={hot:!1,liveReload:!1,progress:!1,overlay:!1},m=(0,c["default"])(n);function h(e){a().setLogLevel("verbose"===e||"log"===e?"info":e),(0,d.setLogLevel)(e)}"true"===m.hot&&(y.hot=!0,d.log.info("Hot Module Replacement enabled.")),"true"===m["live-reload"]&&(y.liveReload=!0,d.log.info("Live Reloading enabled.")),m.logging&&(y.logging=m.logging),"undefined"!==typeof m.reconnect&&(y.reconnect=Number(m.reconnect)),y.logging&&h(y.logging),self.addEventListener("beforeunload",(function(){v.isUnloading=!0}));var b={hot:function(){"false"!==m.hot&&(y.hot=!0,d.log.info("Hot Module Replacement enabled."))},liveReload:function(){"false"!==m["live-reload"]&&(y.liveReload=!0,d.log.info("Live Reloading enabled."))},invalid:function(){d.log.info("App updated. Recompiling..."),y.overlay&&(0,u.hide)(),(0,f["default"])("Invalid")},hash:function(e){v.previousHash=v.currentHash,v.currentHash=e},logging:h,overlay:function(e){"undefined"!==typeof document&&(y.overlay=e)},reconnect:function(e){"false"!==m.reconnect&&(y.reconnect=e)},progress:function(e){y.progress=e},"progress-update":function(e){y.progress&&d.log.info("".concat(e.pluginName?"[".concat(e.pluginName,"] "):"").concat(e.percent,"% - ").concat(e.msg,".")),(0,f["default"])("Progress",e)},"still-ok":function(){d.log.info("Nothing changed."),y.overlay&&(0,u.hide)(),(0,f["default"])("StillOk")},ok:function(){(0,f["default"])("Ok"),y.overlay&&(0,u.hide)(),(0,p["default"])(y,v)},"content-changed":function(e){d.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},"static-changed":function(e){d.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},warnings:function(e,o){d.log.warn("Warnings while compiling.");var t=e.map((function(e){var o=(0,u.formatProblem)("warning",e),t=o.header,n=o.body;return"".concat(t,"\n").concat(i()(n))}));(0,f["default"])("Warnings",t);for(var n=0;n<t.length;n++)d.log.warn(t[n]);var r="boolean"===typeof y.overlay?y.overlay:y.overlay&&y.overlay.warnings;r&&(0,u.show)("warning",e),o&&o.preventReloading||(0,p["default"])(y,v)},errors:function(e){d.log.error("Errors while compiling. Reload prevented.");var o=e.map((function(e){var o=(0,u.formatProblem)("error",e),t=o.header,n=o.body;return"".concat(t,"\n").concat(i()(n))}));(0,f["default"])("Errors",o);for(var t=0;t<o.length;t++)d.log.error(o[t]);var n="boolean"===typeof y.overlay?y.overlay:y.overlay&&y.overlay.errors;n&&(0,u.show)("error",e)},error:function(e){d.log.error(e)},close:function(){d.log.info("Disconnected!"),y.overlay&&(0,u.hide)(),(0,f["default"])("Close")}},w=(0,g["default"])(m);(0,s["default"])(w,b,y.reconnect)},"./node_modules/webpack-dev-server/client/modules/logger/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/modules/logger/index.js ***!
  \************************************************************************/(e,o)=>{(function(){"use strict";var e={"./client-src/modules/logger/SyncBailHookFake.js":
/*!*******************************************************!*\
  !*** ./client-src/modules/logger/SyncBailHookFake.js ***!
  \*******************************************************/function(e){e.exports=function(){return{call:function(){}}}},"./node_modules/webpack/lib/logging/Logger.js":
/*!****************************************************!*\
  !*** ./node_modules/webpack/lib/logging/Logger.js ***!
  \****************************************************/function(e,o){function t(e){return l(e)||a(e)||r(e)||n()}function n(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function r(e,o){if(e){if("string"===typeof e)return i(e,o);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?i(e,o):void 0}}function a(e){if("undefined"!==typeof("undefined"!==typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!==typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}function l(e){if(Array.isArray(e))return i(e)}function i(e,o){(null==o||o>e.length)&&(o=e.length);for(var t=0,n=new Array(o);t<o;t++)n[t]=e[t];return n}function c(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}function s(e,o){for(var t=0;t<o.length;t++){var n=o[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function u(e,o,t){return o&&s(e.prototype,o),t&&s(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}var d=Object.freeze({error:"error",warn:"warn",info:"info",log:"log",debug:"debug",trace:"trace",group:"group",groupCollapsed:"groupCollapsed",groupEnd:"groupEnd",profile:"profile",profileEnd:"profileEnd",time:"time",clear:"clear",status:"status"});o.LogType=d;var f=("undefined"!==typeof Symbol?Symbol:function(e){return e})("webpack logger raw log method"),p=("undefined"!==typeof Symbol?Symbol:function(e){return e})("webpack logger times"),g=("undefined"!==typeof Symbol?Symbol:function(e){return e})("webpack logger aggregated times"),v=function(){function e(o,t){c(this,e),this[f]=o,this.getChildLogger=t}return u(e,[{key:"error",value:function(){for(var e=arguments.length,o=new Array(e),t=0;t<e;t++)o[t]=arguments[t];this[f](d.error,o)}},{key:"warn",value:function(){for(var e=arguments.length,o=new Array(e),t=0;t<e;t++)o[t]=arguments[t];this[f](d.warn,o)}},{key:"info",value:function(){for(var e=arguments.length,o=new Array(e),t=0;t<e;t++)o[t]=arguments[t];this[f](d.info,o)}},{key:"log",value:function(){for(var e=arguments.length,o=new Array(e),t=0;t<e;t++)o[t]=arguments[t];this[f](d.log,o)}},{key:"debug",value:function(){for(var e=arguments.length,o=new Array(e),t=0;t<e;t++)o[t]=arguments[t];this[f](d.debug,o)}},{key:"assert",value:function(e){if(!e){for(var o=arguments.length,t=new Array(o>1?o-1:0),n=1;n<o;n++)t[n-1]=arguments[n];this[f](d.error,t)}}},{key:"trace",value:function(){this[f](d.trace,["Trace"])}},{key:"clear",value:function(){this[f](d.clear)}},{key:"status",value:function(){for(var e=arguments.length,o=new Array(e),t=0;t<e;t++)o[t]=arguments[t];this[f](d.status,o)}},{key:"group",value:function(){for(var e=arguments.length,o=new Array(e),t=0;t<e;t++)o[t]=arguments[t];this[f](d.group,o)}},{key:"groupCollapsed",value:function(){for(var e=arguments.length,o=new Array(e),t=0;t<e;t++)o[t]=arguments[t];this[f](d.groupCollapsed,o)}},{key:"groupEnd",value:function(){for(var e=arguments.length,o=new Array(e),t=0;t<e;t++)o[t]=arguments[t];this[f](d.groupEnd,o)}},{key:"profile",value:function(e){this[f](d.profile,[e])}},{key:"profileEnd",value:function(e){this[f](d.profileEnd,[e])}},{key:"time",value:function(e){this[p]=this[p]||new Map,this[p].set(e,process.hrtime())}},{key:"timeLog",value:function(e){var o=this[p]&&this[p].get(e);if(!o)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeLog()"));var n=process.hrtime(o);this[f](d.time,[e].concat(t(n)))}},{key:"timeEnd",value:function(e){var o=this[p]&&this[p].get(e);if(!o)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeEnd()"));var n=process.hrtime(o);this[p].delete(e),this[f](d.time,[e].concat(t(n)))}},{key:"timeAggregate",value:function(e){var o=this[p]&&this[p].get(e);if(!o)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeAggregate()"));var t=process.hrtime(o);this[p].delete(e),this[g]=this[g]||new Map;var n=this[g].get(e);void 0!==n&&(t[1]+n[1]>1e9?(t[0]+=n[0]+1,t[1]=t[1]-1e9+n[1]):(t[0]+=n[0],t[1]+=n[1])),this[g].set(e,t)}},{key:"timeAggregateEnd",value:function(e){if(void 0!==this[g]){var o=this[g].get(e);void 0!==o&&(this[g].delete(e),this[f](d.time,[e].concat(t(o))))}}}]),e}();o.Logger=v},"./node_modules/webpack/lib/logging/createConsoleLogger.js":
/*!*****************************************************************!*\
  !*** ./node_modules/webpack/lib/logging/createConsoleLogger.js ***!
  \*****************************************************************/function(e,o,t){function n(e){return i(e)||l(e)||a(e)||r()}function r(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function a(e,o){if(e){if("string"===typeof e)return c(e,o);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?c(e,o):void 0}}function l(e){if("undefined"!==typeof("undefined"!==typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!==typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}function i(e){if(Array.isArray(e))return c(e)}function c(e,o){(null==o||o>e.length)&&(o=e.length);for(var t=0,n=new Array(o);t<o;t++)n[t]=e[t];return n}var s=t(/*! ./Logger */"./node_modules/webpack/lib/logging/Logger.js"),u=s.LogType,d=function(e){if("string"===typeof e){var o=new RegExp("[\\\\/]".concat(e.replace(/[-[\]{}()*+?.\\^$|]/g,"\\$&"),"([\\\\/]|$|!|\\?)"));return function(e){return o.test(e)}}return e&&"object"===typeof e&&"function"===typeof e.test?function(o){return e.test(o)}:"function"===typeof e?e:"boolean"===typeof e?function(){return e}:void 0},f={none:6,false:6,error:5,warn:4,info:3,log:2,true:2,verbose:1};e.exports=function(e){var o=e.level,t=void 0===o?"info":o,r=e.debug,a=void 0!==r&&r,l=e.console,i="boolean"===typeof a?[function(){return a}]:[].concat(a).map(d),c=f["".concat(t)]||0,s=function(e,o,t){var r=function(){return Array.isArray(t)?t.length>0&&"string"===typeof t[0]?["[".concat(e,"] ").concat(t[0])].concat(n(t.slice(1))):["[".concat(e,"]")].concat(n(t)):[]},a=i.some((function(o){return o(e)}));switch(o){case u.debug:if(!a)return;"function"===typeof l.debug?l.debug.apply(l,n(r())):l.log.apply(l,n(r()));break;case u.log:if(!a&&c>f.log)return;l.log.apply(l,n(r()));break;case u.info:if(!a&&c>f.info)return;l.info.apply(l,n(r()));break;case u.warn:if(!a&&c>f.warn)return;l.warn.apply(l,n(r()));break;case u.error:if(!a&&c>f.error)return;l.error.apply(l,n(r()));break;case u.trace:if(!a)return;l.trace();break;case u.groupCollapsed:if(!a&&c>f.log)return;if(!a&&c>f.verbose){"function"===typeof l.groupCollapsed?l.groupCollapsed.apply(l,n(r())):l.log.apply(l,n(r()));break}case u.group:if(!a&&c>f.log)return;"function"===typeof l.group?l.group.apply(l,n(r())):l.log.apply(l,n(r()));break;case u.groupEnd:if(!a&&c>f.log)return;"function"===typeof l.groupEnd&&l.groupEnd();break;case u.time:if(!a&&c>f.log)return;var s=1e3*t[1]+t[2]/1e6,d="[".concat(e,"] ").concat(t[0],": ").concat(s," ms");"function"===typeof l.logTime?l.logTime(d):l.log(d);break;case u.profile:"function"===typeof l.profile&&l.profile.apply(l,n(r()));break;case u.profileEnd:"function"===typeof l.profileEnd&&l.profileEnd.apply(l,n(r()));break;case u.clear:if(!a&&c>f.log)return;"function"===typeof l.clear&&l.clear();break;case u.status:if(!a&&c>f.info)return;"function"===typeof l.status?0===t.length?l.status():l.status.apply(l,n(r())):0!==t.length&&l.info.apply(l,n(r()));break;default:throw new Error("Unexpected LogType ".concat(o))}};return s}},"./node_modules/webpack/lib/logging/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/webpack/lib/logging/runtime.js ***!
  \*****************************************************/function(e,o,t){function n(){return n=Object.assign||function(e){for(var o=1;o<arguments.length;o++){var t=arguments[o];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},n.apply(this,arguments)}var r=t(/*! tapable/lib/SyncBailHook */"./client-src/modules/logger/SyncBailHookFake.js"),a=t(/*! ./Logger */"./node_modules/webpack/lib/logging/Logger.js"),l=a.Logger,i=t(/*! ./createConsoleLogger */"./node_modules/webpack/lib/logging/createConsoleLogger.js"),c={level:"info",debug:!1,console},s=i(c);o.getLogger=function(e){return new l((function(t,n){void 0===o.hooks.log.call(e,t,n)&&s(e,t,n)}),(function(t){return o.getLogger("".concat(e,"/").concat(t))}))},o.configureDefaultLogger=function(e){n(c,e),s=i(c)},o.hooks={log:new r(["origin","type","args"])}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={exports:{}};return e[o](a,a.exports,n),a.exports}!function(){n.d=function(e,o){for(var t in o)n.o(o,t)&&!n.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:o[t]})}}(),function(){n.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)}}(),function(){n.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}}();var r={};!function(){
/*!********************************************!*\
  !*** ./client-src/modules/logger/index.js ***!
  \********************************************/
n.r(r),n.d(r,{default:function(){return e}});var e=n(/*! webpack/lib/logging/runtime.js */"./node_modules/webpack/lib/logging/runtime.js")}();var a=o;for(var l in r)a[l]=r[l];r.__esModule&&Object.defineProperty(a,"__esModule",{value:!0})})()},"./node_modules/webpack-dev-server/client/modules/strip-ansi/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/modules/strip-ansi/index.js ***!
  \****************************************************************************/(e,o)=>{(function(){"use strict";var e={"./node_modules/strip-ansi/index.js":
/*!******************************************!*\
  !*** ./node_modules/strip-ansi/index.js ***!
  \******************************************/function(e,o,t){t.r(o),t.d(o,{default:function(){return r}});var n=t(/*! ansi-regex */"./node_modules/strip-ansi/node_modules/ansi-regex/index.js");function r(e){if("string"!==typeof e)throw new TypeError("Expected a `string`, got `".concat(typeof e,"`"));return e.replace((0,n["default"])(),"")}},"./node_modules/strip-ansi/node_modules/ansi-regex/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/strip-ansi/node_modules/ansi-regex/index.js ***!
  \******************************************************************/function(e,o,t){function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=e.onlyFirst,t=void 0!==o&&o,n=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");return new RegExp(n,t?void 0:"g")}t.r(o),t.d(o,{default:function(){return n}})}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={exports:{}};return e[o](a,a.exports,n),a.exports}!function(){n.d=function(e,o){for(var t in o)n.o(o,t)&&!n.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:o[t]})}}(),function(){n.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)}}(),function(){n.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}}();var r={};!function(){
/*!************************************************!*\
  !*** ./client-src/modules/strip-ansi/index.js ***!
  \************************************************/
n.r(r);var e=n(/*! strip-ansi */"./node_modules/strip-ansi/index.js");r["default"]=e["default"]}();var a=o;for(var l in r)a[l]=r[l];r.__esModule&&Object.defineProperty(a,"__esModule",{value:!0})})()},"./node_modules/webpack-dev-server/client/overlay.js":
/*!***********************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/overlay.js ***!
  \***********************************************************/(e,o,t)=>{"use strict";t.r(o),t.d(o,{formatProblem:()=>p,show:()=>g,hide:()=>f});var n,r,a=t(/*! ansi-html-community */"./node_modules/ansi-html-community/index.js"),l=t.n(a),i=t(/*! html-entities */"./node_modules/html-entities/lib/index.js"),c={reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"},s=[];function u(){n=document.createElement("iframe"),n.id="webpack-dev-server-client-overlay",n.src="about:blank",n.style.position="fixed",n.style.left=0,n.style.top=0,n.style.right=0,n.style.bottom=0,n.style.width="100vw",n.style.height="100vh",n.style.border="none",n.style.zIndex=9999999999,n.onload=function(){r=n.contentDocument.createElement("div"),r.id="webpack-dev-server-client-overlay-div",r.style.position="fixed",r.style.boxSizing="border-box",r.style.left=0,r.style.top=0,r.style.right=0,r.style.bottom=0,r.style.width="100vw",r.style.height="100vh",r.style.backgroundColor="rgba(0, 0, 0, 0.85)",r.style.color="#E8E8E8",r.style.fontFamily="Menlo, Consolas, monospace",r.style.fontSize="large",r.style.padding="2rem",r.style.lineHeight="1.2",r.style.whiteSpace="pre-wrap",r.style.overflow="auto";var e=document.createElement("span");e.innerText="Compiled with problems:";var o=document.createElement("button");o.innerText="X",o.style.background="transparent",o.style.border="none",o.style.fontSize="20px",o.style.fontWeight="bold",o.style.color="white",o.style.cursor="pointer",o.style.cssFloat="right",o.style.styleFloat="right",o.addEventListener("click",(function(){f()})),r.appendChild(e),r.appendChild(o),r.appendChild(document.createElement("br")),r.appendChild(document.createElement("br")),n.contentDocument.body.appendChild(r),s.forEach((function(e){e(r)})),s=[],n.onload=null},document.body.appendChild(n)}function d(e){r?e(r):(s.push(e),n||u())}function f(){n&&(document.body.removeChild(n),n=null,r=null)}function p(e,o){var t="warning"===e?"WARNING":"ERROR",n="";if("string"===typeof o)n+=o;else{var r=o.file||"",a=o.moduleName?-1!==o.moduleName.indexOf("!")?"".concat(o.moduleName.replace(/^(\s|\S)*!/,"")," (").concat(o.moduleName,")"):"".concat(o.moduleName):"",l=o.loc;t+="".concat(a||r?" in ".concat(a?"".concat(a).concat(r?" (".concat(r,")"):""):r).concat(l?" ".concat(l):""):""),n+=o.message||""}return{header:t,body:n}}function g(e,o){d((function(){o.forEach((function(o){var t=document.createElement("div"),n=document.createElement("span"),a=p(e,o),s=a.header,u=a.body;n.innerText=s,n.style.color="#".concat(c.red);var d=l()((0,i.encode)(u)),f=document.createElement("div");f.innerHTML=d,t.appendChild(n),t.appendChild(document.createElement("br")),t.appendChild(document.createElement("br")),t.appendChild(f),t.appendChild(document.createElement("br")),t.appendChild(document.createElement("br")),r.appendChild(t)}))}))}l().setColors(c)},"./node_modules/webpack-dev-server/client/socket.js":
/*!**********************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/socket.js ***!
  \**********************************************************/(e,o,t)=>{"use strict";t.r(o),t.d(o,{default:()=>d});var n=t(/*! ./clients/WebSocketClient.js */"./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),r=t(/*! ./utils/log.js */"./node_modules/webpack-dev-server/client/utils/log.js"),a=t(/*! ./node_modules/webpack-dev-server/client/clients/WebSocketClient.js */"./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),l="undefined"!==typeof a?"undefined"!==typeof a.default?a.default:a:n["default"],i=0,c=10,s=null,u=function(e,o,t){s=new l(e),s.onOpen((function(){i=0,"undefined"!==typeof t&&(c=t)})),s.onClose((function(){if(0===i&&o.close(),s=null,i<c){var n=1e3*Math.pow(2,i)+100*Math.random();i+=1,r.log.info("Trying to reconnect..."),setTimeout((function(){u(e,o,t)}),n)}})),s.onMessage((function(e){var t=JSON.parse(e);o[t.type]&&o[t.type](t.data,t.params)}))};const d=u},"./node_modules/webpack-dev-server/client/utils/createSocketURL.js":
/*!*************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/createSocketURL.js ***!
  \*************************************************************************/(e,o,t)=>{"use strict";function n(e){var o=e.protocol||"";o&&":"!==o.substr(-1)&&(o+=":");var t=e.auth||"";t&&(t=encodeURIComponent(t),t=t.replace(/%3A/i,":"),t+="@");var n="";e.hostname&&(n=t+(-1===e.hostname.indexOf(":")?e.hostname:"[".concat(e.hostname,"]")),e.port&&(n+=":".concat(e.port)));var r=e.pathname||"";e.slashes?(n="//".concat(n||""),r&&"/"!==r.charAt(0)&&(r="/".concat(r))):n||(n="");var a=e.search||"";a&&"?"!==a.charAt(0)&&(a="?".concat(a));var l=e.hash||"";return l&&"#"!==l.charAt(0)&&(l="#".concat(l)),r=r.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})),a=a.replace("#","%23"),"".concat(o).concat(n).concat(r).concat(a).concat(l)}function r(e){var o=e.hostname,t="0.0.0.0"===o||"::"===o||"[::]"===o;t&&self.location.hostname&&0===self.location.protocol.indexOf("http")&&(o=self.location.hostname);var r=e.protocol||self.location.protocol;("auto:"===r||o&&t&&"https:"===self.location.protocol)&&(r=self.location.protocol),r=r.replace(/^(?:http|.+-extension|file)/i,"ws");var a="";e.username&&(a=e.username,e.password&&(a=a.concat(":",e.password)));var l=(o||self.location.hostname||"localhost").replace(/^\[(.*)\]$/,"$1"),i=e.port;i&&"0"!==i||(i=self.location.port);var c="/ws";return e.pathname&&!e.fromCurrentScript&&(c=e.pathname),n({protocol:r,auth:a,hostname:l,port:i,pathname:c,slashes:!0})}t.r(o),t.d(o,{default:()=>a});const a=r},"./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":
/*!********************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js ***!
  \********************************************************************************/(e,o,t)=>{"use strict";function n(){if(document.currentScript)return document.currentScript.getAttribute("src");var e=document.scripts||[],o=Array.prototype.filter.call(e,(function(e){return e.getAttribute("src")}));if(o.length>0){var t=o[o.length-1];return t.getAttribute("src")}throw new Error("[webpack-dev-server] Failed to get current script source.")}t.r(o),t.d(o,{default:()=>r});const r=n},"./node_modules/webpack-dev-server/client/utils/log.js":
/*!*************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/log.js ***!
  \*************************************************************/(e,o,t)=>{"use strict";t.r(o),t.d(o,{log:()=>c,setLogLevel:()=>i});var n=t(/*! ../modules/logger/index.js */"./node_modules/webpack-dev-server/client/modules/logger/index.js"),r=t.n(n),a="webpack-dev-server",l="info";function i(e){r().configureDefaultLogger({level:e})}i(l);var c=r().getLogger(a)},"./node_modules/webpack-dev-server/client/utils/parseURL.js":
/*!******************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/parseURL.js ***!
  \******************************************************************/(e,o,t)=>{"use strict";t.r(o),t.d(o,{default:()=>a});var n=t(/*! ./getCurrentScriptSource.js */"./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");function r(e){var o={};if("string"===typeof e&&""!==e)for(var t=e.substr(1).split("&"),r=0;r<t.length;r++){var a=t[r].split("=");o[a[0]]=decodeURIComponent(a[1])}else{var l,i=(0,n["default"])();try{l=new URL(i,self.location.href)}catch(c){}l&&(o=l,o.fromCurrentScript=!0)}return o}const a=r},"./node_modules/webpack-dev-server/client/utils/reloadApp.js":
/*!*******************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/reloadApp.js ***!
  \*******************************************************************/(e,o,t)=>{"use strict";t.r(o),t.d(o,{default:()=>i});var n=t(/*! webpack/hot/emitter.js */"./node_modules/webpack/hot/emitter.js"),r=t.n(n),a=t(/*! ./log.js */"./node_modules/webpack-dev-server/client/utils/log.js");function l(e,o){var t=e.hot,n=e.liveReload;if(!o.isUnloading){var l=o.currentHash,i=o.previousHash,c=l.indexOf(i)>=0;if(!c){var s=self.location.search.toLowerCase(),u=-1===s.indexOf("webpack-dev-server-hot=false"),d=-1===s.indexOf("webpack-dev-server-live-reload=false");if(t&&u)a.log.info("App hot update..."),r().emit("webpackHotUpdate",o.currentHash),"undefined"!==typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(o.currentHash),"*");else if(n&&d)var f=self,p=self.setInterval((function(){"about:"!==f.location.protocol?g(f,p):(f=f.parent,f.parent===f&&g(f,p))}))}}function g(e,o){clearInterval(o),a.log.info("App updated. Reloading..."),e.location.reload()}}const i=l},"./node_modules/webpack-dev-server/client/utils/sendMessage.js":
/*!*********************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/sendMessage.js ***!
  \*********************************************************************/(e,o,t)=>{"use strict";function n(e,o){"undefined"===typeof self||"undefined"!==typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(e),data:o},"*")}t.r(o),t.d(o,{default:()=>r});const r=n}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,